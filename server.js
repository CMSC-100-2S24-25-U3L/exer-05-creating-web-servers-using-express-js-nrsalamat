//Salamat, Nathaniel R.
//Modified from the sample code

//Import modules
import express from 'express';
import fs from 'node:fs';



function writeFile(book) {
	const validation = {
		success: true,
	}

	//Check if there is an empty field
	if (book.name == null || book.isbn == null || book.author == null || book.year == null) {
		console.log(validation.success = false);
	} else {
		fs.appendFileSync('books.txt', `${book.name},${book.isbn},${book.author},${book.year}\n`);
	}
	
	console.log(validation); // Prints the validation status
}



function readFile() {
	const booksRawData = fs.readFileSync('books.txt', 'utf8');

	let booksArray = booksRawData.split('\n');

	let books = [];

	for (let i = 0; i < booksArray.length - 1; i++) {
		//-1 to get rid of the blank end line in the file

		books.push(booksArray[i].split(','));
	}

	// console.log(books);
	return books;
}



function findIsbnAuthor(books, isbn, author) {
	let booksOfIsbnAuthor = []

	for (let i = 0; i < books.length; i++) {
		if(books[i][1] == isbn && books[i][2] == author) {
			booksOfIsbnAuthor.push(books[i]);
		}
	}

	return booksOfIsbnAuthor;
}



function findAuthor(books, author) {
	let booksOfAuthor = []

	for (let i = 0; i < books.length; i++) {
		if(books[i][2] == author) {
			booksOfAuthor.push(books[i]);
		}
	}

	return booksOfAuthor;
}



// instantiate the server
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// this tells our app to listen for GET messages on the '/' path
// the callback function specifies what the server will do when a message is received
app.get('/', (req, res) => {
	console.log(req);
	console.log(res); // this will show the default response object generated by Express. We can modify or add to this object before calling res.send()
	res.send(`
		<h1>Exercise 5</h1>
	`);
});

app.get('/find-by-isbn-author', (req, res) => {
	let books = readFile();

	// console.log(req.query.author);

	res.send(findIsbnAuthor(books, req.query.isbn, req.query.author));
});

app.get('/find-by-author', (req, res) => {
	let books = readFile();

	// console.log(req.query.author);

	res.send(findAuthor(books, req.query.author));
});

app.post('/add-book', (req, res) => {
	//Send request, wait for response

	console.log(req.body);
	res.send(req.body);

	writeFile(req.body);
});

// this tells our server to listen to the port 3000
// we can also pass an optional callback function to execute after the server starts
app.listen(3000, () => { console.log('Server started at port 3000')} );
